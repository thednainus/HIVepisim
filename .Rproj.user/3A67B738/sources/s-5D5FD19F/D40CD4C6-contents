#' @title Arrivals Module
#'
#' @description Module function for arrivals into the sexually active
#'              population. Arrivals are modelled independetly for population 1
#'              (which will have origin = "region" and related to the MSM population in
#'              San Diego) and population 2 (which will have origin = global
#'              representing the global population of MSM).
#'
#' @inheritParams EpiModelHIV::aging_msm
#'
#' @details
#' New population members are added based on expected numbers of entries,
#' stochastically determined with draws from Poisson distributions. For each new
#' entry, a set of attributes is added for that node, and the nodes are added onto
#' the network objects. Only attributes that are a part of the network model
#' formulae are updated as vertex attributes on the network objects.
#'
#' @return
#' This function updates the \code{attr} list with new attributes for each new
#' population member, and the \code{nw} objects with new vertices.
#'
#' @keywords module msm
#' @export
#'
arrival_msm_2pop <- function(dat, at){

  ## Variables

  # Parameters
  # arrival rate for population 1 (San Diego population)
  a1.rate <- dat$param$a1.rate
  # arrival rate for population 2 (Global population)
  a2.rate <- dat$param$a2.rate


  # births for population 1
  ## Process
  num1 <- dat$epi$num1[at - 1]

  nArrivalsExp1 <- num1 * a1.rate
  nArrivals_pop1 <- rpois(1, nArrivalsExp1)


  # births for population 2
  ## Process
  num2 <- dat$epi$num2[at - 1]

  nArrivalsExp2 <- num2 * a2.rate
  nArrivals_pop2 <- rpois(1, nArrivalsExp2)


  ## Update Attr
  if (nArrivals_pop1 > 0) {
    dat <- setNewAttr_msm_2pop(dat, at, nArrivals_pop1, origin = "region")
  }

  if (nArrivals_pop2 > 0) {
    dat <- setNewAttr_msm_2pop(dat, at, nArrivals_pop2, origin = "global")
  }

  # Update Networks
  #if (nNew > 0) {
  #dat$nw <- tergmLite::add_vertices(dat$nw, nNew)
  #}

  ## Output
  dat$epi$nArrivalsPop1[at] <- nArrivals_pop1
  dat$epi$nArrivalsPop2[at] <- nArrivals_pop2

  return(dat)
}


setNewAttr_msm_2pop <- function(dat, at, nNew, origin) {

  # Set all attributes NA by default
  dat$attr <- lapply(dat$attr, {
    function(x)
      c(x, rep(NA, nNew))
  })
  newIds <- which(is.na(dat$attr$active))

  # Demographic
  # FFN: uid = unique identifier?
  dat$attr$active[newIds] <- rep(1, nNew)
  dat$attr$uid[newIds] <- dat$temp$max.uid + (1:nNew)
  dat$temp$max.uid <- dat$temp$max.uid + nNew

  dat$attr$entrTime[newIds] <- rep(at, nNew)

  dat$attr$age[newIds] <- rep(dat$param$arrival.age, nNew)
  #age.breaks <- dat$param$netstats$demog$age.breaks
  #attr_age.grp <- cut(dat$attr$age[newIds], age.breaks, labels = FALSE)
  #dat$attr$age.grp[newIds] <- attr_age.grp

  # Disease status and related
  dat$attr$status[newIds] <- rep(0, nNew)
  dat$attr$diag.status[newIds] <- rep(0, nNew)

  dat$attr$count.trans[newIds] <- 0


  # two risk groups
  dat$attr$risk.group[newIds] <- sample(1:2, nNew, TRUE)


  # HIV screening
  dat$attr$num.neg.tests[newIds] <- 0

  if(origin == "region"){
    dat$attr$origin[newIds] <- rep("region", nNew)
    dat$attr$migrant[newIds] <- rep(1, nNew)
  }else if (origin == "global"){
    dat$attr$origin[newIds] <- rep("global", nNew)
    dat$attr$migrant[newIds] <- rep(2, nNew)
  }


  ## Check attributes written as expected
  cbind(sapply(dat$attr, function(x) is.na(tail(x, 1))))

  return(dat)
}
