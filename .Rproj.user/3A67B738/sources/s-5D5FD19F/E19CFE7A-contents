#' @title HIV Testing Module
#'
#' @description Module function for HIV diagnostic testing of infected persons.
#'
#' @inheritParams EpiModelHIV::aging_msm
#'
#'
#' @return
#' This function returns the \code{dat} object with updated \code{last.neg.test},
#' \code{diag.status} and \code{diag.time} attributes. Summary statistics for
#' number of new diagnoses, total number of tests, and total number of negative
#' tests are calculated and stored on \code{dat$epi}.
#'
#' @keywords module msm
#'
#' @export
#'
hivtest_msm_sdiego <- function(dat, at) {

  ## Variables

  # Attributes
  diag.status <- dat$attr$diag.status
  status <- dat$attr$status
  infTime <- dat$attr$infTime
  stage <- dat$attr$stage


  # Parameters
  hiv.test.rate <- dat$param$hiv.test.rate
  #aids.test.int <- dat$param$vl.aids.int/2
  twind.int <- dat$param$test.window.int

  tsincelntst <- at - dat$attr$last.neg.test
  tsincelntst[is.na(tsincelntst)] <- at - dat$attr$entrTime[is.na(tsincelntst)]

  # General interval testing
  elig <- which((diag.status == 0 | is.na(diag.status)))

  # Testing rates
  rates <- hiv.test.rate
  idsTstGen <- elig[rbinom(length(elig), 1, rates) == 1]

  tstAll <- idsTstGen

  tstPos <- tstAll[status[tstAll] == 1 & infTime[tstAll] <= at - twind.int]
  tstNeg <- setdiff(tstAll, tstPos)

  # Attributes
  dat$attr$last.neg.test[tstNeg] <- at
  dat$attr$diag.status[tstPos] <- 1
  dat$attr$diag.time[tstPos] <- at
  dat$attr$diag.stage[tstPos] <- stage[tstPos]

  # Summary stats
  if (at >= 52*65) {
    dat$attr$num.neg.tests[tstNeg] <- dat$attr$num.neg.tests[tstNeg] + 1
  }
  dat$epi$tot.tests[at] <- length(tstAll)
  dat$epi$tot.neg.tests[at] <- length(tstNeg)

  # number of new diagnoses by timing
  dat$epi$newDx[at] <- length(tstPos)
  #diag.time <- dat$attr$diag.time
  #dat$epi$newDx45[at] <- length(intersect(tstPos, which(diag.time - infTime <= 45/7)))
  #dat$epi$newDx140[at] <- length(intersect(tstPos, which(diag.time - infTime <= 140/7)))
  #dat$epi$newDx200[at] <- length(intersect(tstPos, which(diag.time - infTime <= 200/7)))
  #dat$epi$newDx2y[at] <- length(intersect(tstPos, which(diag.time - infTime > 104)))

  return(dat)
}

